;
		btn.addActionListener(this);
		btn2.addActionListener(this);
		btn3.addActionListener(this);
		txt2.setEnabled(false);
		
		jf.show();
	 	
	 	c.add(txt1);
	 
		c.add(btn);
		c.add(btn2);
		c.add(confirm);
		c.add(T2);
		//c.add(T3);
		c.add(T4);
		//c.add(T5);
		c.add(pane, BorderLayout.CENTER);
		c.add(btn1);
		c.add(T0);
		
		c.add(btn3);
		c.add(btn4);
//		c.add(l5);
		
		
		jf.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent win) {
				System.exit(0);
			}
		});
		
	
		
	}		

		public void actionPerformed(ActionEvent e) {
		
			String dataname="";
		    	DataInputStream input;

		    	BufferedInputStream bis;
		    	BufferedOutputStream bos = null;
		    	BufferedWriter writer = null;
		    	int in;
		    	StringBuffer buffer = new StringBuffer();
		    			    			 
			    String strLine = null;
			    String newline = "\n";
			    
			    if (e.getSource() == btn) {
			    	String strLine1 = null;
				
					
					JFileChooser chooser = new JFileChooser();

						try {

							File f = new File(new File("filename.txt").getCanonicalPath());

							chooser.setSelectedFile(f);
						} catch (IOException e1) {
						}

						chooser.showOpenDialog(btn3);
						int retval = chooser.showOpenDialog(btn1);
						if (retval == JFileChooser.APPROVE_OPTION) {
							File field = chooser.getSelectedFile();
							 path1=field.getAbsolutePath();
							 
						}

						File curFile = chooser.getSelectedFile();
						String f = curFile.getName();
						txt1.setText(f);

						try {

							FileInputStream fstream = new FileInputStream(curFile);

							DataInputStream ins = new DataInputStream(fstream);
							BufferedReader br = new BufferedReader(new InputStreamReader(
									ins));

							StringBuffer buffer1 = new StringBuffer();
							while ((strLine1 = br.readLine()) != null) {

								System.out.println(strLine1);
								buffer1.append(strLine1 + "\n");

							}
							tf.setText(buffer1.toString());
							System.out.println(buffer1.length());
						} catch (Exception e1) {
							System.err.println("Error: " + e1.getMessage());
						}
					
				}
			    
			 if(e.getSource()== btn3)
			 {
					try {
						
						if(!(txt1.equals(null)&&tf.equals(null)))
						 {
							
						String[] dsname = { "Select Destination", "A", "B", "C", "D", "E" };
						
						 dataname = (String) JOptionPane.showInputDialog(null,"Select Destination", "Destination Name",
								JOptionPane.QUESTION_MESSAGE, null,  dsname,  dsname[0]);
						String ip = JOptionPane.showInputDialog(null,"Please Enter the IP Address Of Router");
						
						String dest = JOptionPane.showInputDialog(null,
								"Please Enter the IP Address Of "+dataname);
						AES a1=new AES();
						
						String cont=tf.getText();
						String fname = txt1.getText();
						String content=a1.encrypt(cont,keyWord);
						
						PrintStream out = null;
						try {
						    out = new PrintStream(new FileOutputStream("Sender\\"+fname));
						    out.print(content);
						}
						finally {
						    if (out != null) out.close();
						}
						MessageDigest md1 = MessageDigest.getInstance("SHA1");
						FileInputStream in11 = new FileInputStream("Sender\\"+ fname);
						DigestInputStream dis21 = new DigestInputStream(in11, md1);
						BufferedInputStream bd1 = new BufferedInputStream(dis21);

						while (true) {
							int b2 = bd1.read();
							if (b2 == -1)
								break;
						}

						BigInteger bi21 = new BigInteger(md1.digest());
						String mac1 = bi21.toString(16);
						System.out.println(mac1);
						SplitFile sp = new SplitFile();
						sp.splitFile(new File("Sender\\"+fname),5, 1024);
						
					
//						System.out.println("FileNAME:"+fname);
						int len = fname.length();
						String fil = fname.substring(0, len-5);
//						System.out.println(fil);
						
//						
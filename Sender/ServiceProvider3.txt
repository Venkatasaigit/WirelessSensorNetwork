System.out.println("File Splitted");
						
						
//						System.out.println("Hellllllll");
						MessageDigest md = MessageDigest.getInstance("SHA1");
						FileInputStream fis1 = new FileInputStream("Sender\\"+fil+"1"+".txt");
						byte	 bs1[] = new byte[fis1.available()];
						fis1.read(bs1);
						String split1 = new String(bs1);
						fis1.close();
						
						FileInputStream fis11 = new FileInputStream("Sender\\"+fil+"1"+".txt");
						DigestInputStream dis1 = new DigestInputStream(fis11, md);
						BufferedInputStream bis1 = new BufferedInputStream(dis1);
			 
						//Read the bis so SHA1 is auto calculated at dis
						while (true) {
							int b1 = bis1.read();
							if (b1 == -1)
								break;
						}
			 
						BigInteger bi1 = new BigInteger(md.digest());
						String spl1 = bi1.toString();
						String	 h1 = bi1.toString(16);
//						System.out.println(h1);
						
						FileInputStream fis2 = new FileInputStream("Sender\\"+fil+"2"+".txt");//C:\java\mtechproject\cloudcomputing\pra1.txt
						byte bs2[] = new byte[fis2.available()];
						fis2.read(bs2);
						String split2 = new String(bs2);
						FileInputStream fis22 = new FileInputStream("Sender\\"+fil+"2"+".txt");
						DigestInputStream dis2 = new DigestInputStream(fis22, md);
						BufferedInputStream bis2 = new BufferedInputStream(dis2);
			 
						//Read the bis so SHA1 is auto calculated at dis
						while (true) {
							int b2 = bis2.read();
							if (b2 == -1)
								break;
						}
			 
						BigInteger bi2 = new BigInteger(md.digest());
						String  h2 = bi2.toString(16);
//						System.out.println(h2);
						
						
						FileInputStream fis3 = new FileInputStream("Sender\\"+fil+"3"+".txt");//C:\java\mtechproject\cloudcomputing\pra1.txt
						byte bs3[] = new byte[fis3.available()];
						fis3.read(bs3);
						String split3 = new String(bs3);
						FileInputStream fis33 = new FileInputStream("Sender\\"+fil+"3"+".txt");
						DigestInputStream dis3 = new DigestInputStream(fis33, md);
						BufferedInputStream bis3 = new BufferedInputStream(dis3);
			 
						//Read the bis so SHA1 is auto calculated at dis
						while (true) {
							int b3 = bis3.read();
							if (b3 == -1)
								break;
						}
			 
						BigInteger bi3 = new BigInteger(md.digest());
					String h3 = bi3.toString(16);
//						System.out.println(h3);
						
						FileInputStream fis4 = new FileInputStream("Sender\\"+fil+"4"+".txt");//C:\java\mtechproject\cloudcomputing\pra1.txt
						byte bs4[] = new byte[fis4.available()];
						fis4.read(bs4);
						String split4 = new String(bs4);
						
						FileInputStream fis44 = new FileInputStream("Sender\\"+fil+"4"+".txt");
						DigestInputStream dis4 = new DigestInputStream(fis44, md);
						BufferedInputStream bis4 = new BufferedInputStream(dis4);
			 
						//Read the bis so SHA1 is auto calculated at dis
						while (true) {
							int b4 = bis4.read();
							if (b4 == -1)
								break;
						}
			 
						BigInteger bi4 = new BigInteger(md.digest());
						String	 h4 = bi4.toString(16);
//						System.out.println(h4);
						
						
						
						FileInputStream fis5 = new FileInputStream("Sender\\"+fil+"5"+".txt");//C:\java\mtechproject\cloudcomputing\pra1.txt
						byte bs5[] = new byte[fis5.available()];
						fis5.read(bs5);
						String split5 = new String(bs5);
						
						FileInputStream fis55 = new FileInputStream("Sender\\"+fil+"5"+".txt");
						DigestInputStream dis5 = new DigestInputStream(fis55, md);
						BufferedInputStream bis5 = new BufferedInputStream(dis5);
			 
						//Read the bis so SHA1 is auto calculated at dis
						while (true) {
							int b5 = bis5.read();
							if (b5 == -1)
								break;
						}
			 
						BigInteger bi5 = new BigInteger(md.digest());
						String	h5 = bi5.toString(16);
						
						
						
                        Socket